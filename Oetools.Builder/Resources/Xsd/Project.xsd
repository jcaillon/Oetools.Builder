<?xml version="1.0" encoding="utf-8"?>
<xs:schema elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema">
  <xs:element name="Project" nillable="true" type="OeProject">
    <xs:annotation>
      <xs:documentation><![CDATA[An openedge project (i.e. an application).

Remarks:
A project has:
- properties, that are used to describe your application (for instance, the database needed to compile) and are also used to describe options to build your application (for instance, if the compilation should also generate the xref files).
- variables, that make your build process dynamic. You can use variables almost anywhere in this xml and dynamically overload their values when running the build.
- build configurations, which describe a succession of tasks that build your application. Build configurations can also have their own properties and variables which will overload the ones defined at the project level.]]></xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="OeProject">
    <xs:sequence>
      <xs:element minOccurs="0" maxOccurs="1" name="BuildConfigurations" type="ArrayOfOeBuildConfiguration">
        <xs:annotation>
          <xs:documentation><![CDATA[A list of build configurations for this project.

Remarks:
A build configuration describe how to build your application.
It is essentially a succession of tasks (grouped into steps) that should be carried on in a sequential manner to build your application.
Each build configuration has properties, that are used to describe your application (for instance, the database needed to compile your code) and are also used to describe options to build your application (for instance, if the compilation should also generate the xref files).
Each build configuration can also have variables, that make your build process dynamic. You can use variables almost anywhere in this xml and dynamically overload their values when running the build.
Several build configurations can be defined for a single project.

Each build configuration can define "children" build configurations.
Each child inherits its parent properties following these rules:
- If the same leaf is defined for both, the child value is prioritized (leaf = an xml element with no descendant elements).
- If the xml element is a list, the elements if the child (if any) will be added to the elements of the parent (if any). For instance, the tasks list has this behavior.]]></xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="ArrayOfOeBuildConfiguration">
    <xs:sequence>
      <xs:element minOccurs="0" maxOccurs="unbounded" name="Configuration" nillable="true" type="OeBuildConfiguration">
        <xs:annotation>
          <xs:documentation><![CDATA[Represents the configuration of a build

Remarks:
A build configuration describe how to build your application.
It is essentially a succession of tasks (grouped into steps) that should be carried on in a sequential manner to build your application.
Each build configuration has properties, that are used to describe your application (for instance, the database needed to compile your code) and are also used to describe options to build your application (for instance, if the compilation should also generate the xref files).
Each build configuration can also have variables, that make your build process dynamic. You can use variables almost anywhere in this xml and dynamically overload their values when running the build.
Several build configurations can be defined for a single project.

Each build configuration can define "children" build configurations.
Each child inherits its parent properties following these rules:
- If the same leaf is defined for both, the child value is prioritized (leaf = an xml element with no descendant elements).
- If the xml element is a list, the elements if the child (if any) will be added to the elements of the parent (if any). For instance, the tasks list has this behavior.]]></xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="OeBuildConfiguration">
    <xs:sequence>
      <xs:element minOccurs="0" maxOccurs="1" name="Variables" type="ArrayOfOeVariable">
        <xs:annotation>
          <xs:documentation><![CDATA[The variables of this build configurations.

Remarks:
Variables make your build process dynamic by allowing you to change build options without having to modify this xml.
You can use a variable with the syntax {{variable_name}}.
Variables will be replaced by their value at run time.
If the variable exists as an environment variable, its value will be taken in priority (this allows to overload values using environment variables).
Non existing variables will be replaced by an empty string.
Variables can be used in any "string type" properties (this exclude numbers/booleans).
You can use variables in the variables definition but they must be defined in the right order.

Special variables are already defined and available:
- {{SOURCE_DIRECTORY}} the application source directory (defined in properties)
- {{PROJECT_DIRECTORY}} the project directory ({{SOURCE_DIRECTORY}}/.oe)
- {{PROJECT_LOCAL_DIRECTORY}} the project local directory ({{SOURCE_DIRECTORY}}/.oe/local)
- {{DLC}} the dlc path used for the current build
- {{OUTPUT_DIRECTORY}} the build output directory (default to {{SOURCE_DIRECTORY}}/.oe/bin)
- {{CONFIGURATION_NAME}} the build configuration name for the current build
- {{CURRENT_DIRECTORY}} the current directory]]></xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" maxOccurs="1" name="Properties" type="OeProperties">
        <xs:annotation>
          <xs:documentation><![CDATA[The properties of this build configuration.

Remarks:
Properties can describe your application (for instance, the database needed to compile).
Properties can also describe options to build your application (for instance, if the compilation should also generate the xref files).
These properties are used as default values for this project but can be overloaded for each individual build configuration.
For instance, this allows to define a DLC (v11) path for the project but you can define a build configuration that will use another DLC (v9) path.]]></xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" maxOccurs="1" name="PreBuildTasks" type="ArrayOfOeBuildStepClassic">
        <xs:annotation>
          <xs:documentation><![CDATA[A list of steps/tasks that will be executed before anything else.

Remarks:
These tasks can be used to "prepare" the build. For instance, by downloading dependencies or packages. Or by modifying certain source files.
Steps and tasks within steps are executed sequentially in the given order.]]></xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" maxOccurs="1" name="BuildSourceTasks" type="ArrayOfOeBuildStepBuildSource">
        <xs:annotation>
          <xs:documentation><![CDATA[A list of steps/tasks that will build the files in your project source directory.

Remarks:
This is the main tasks list, where openedge files should be compiled.
The history of files built here can be saved to enable an incremental build.
A listing of the source files is made at each step. Which means it would not be efficient to create 10 steps of 1 task each if the files in your source directory will not change between steps.
Steps and tasks within steps are executed sequentially in the given order.]]></xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" maxOccurs="1" name="BuildOutputTasks" type="ArrayOfOeBuildStepClassic">
        <xs:annotation>
          <xs:documentation><![CDATA[A list of steps/tasks that should affect the files in your project output directory.

Remarks:
These tasks should be used to "post-process" the files built from your source directory into the output directory.
For instance, it can be used to build a release zip file containing all the .pl and other configuration files of your release.
A listing of the files in the output directory is made at each step. Which means it would not be efficient to create 10 steps of 1 task each if those files will not change between steps.
Steps and tasks within steps are executed sequentially in the given order.]]></xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" maxOccurs="1" name="PostBuildTasks" type="ArrayOfOeBuildStepClassic">
        <xs:annotation>
          <xs:documentation><![CDATA[A list of steps/tasks that will be executed after anything else.

Remarks:
These tasks can be used to "deploy" a build. For instance, by uploading a release zip file to a distant http or ftp server.
Steps and tasks within steps are executed sequentially in the given order.]]></xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" maxOccurs="1" name="ChildrenBuildConfigurations" type="ArrayOfOeBuildConfiguration">
        <xs:annotation>
          <xs:documentation><![CDATA[A list of children build configurations, each will inherit the properties defined in this one.

Remarks:
A build configuration describe how to build your application.
It is essentially a succession of tasks (grouped into steps) that should be carried on in a sequential manner to build your application.
Each build configuration has properties, that are used to describe your application (for instance, the database needed to compile your code) and are also used to describe options to build your application (for instance, if the compilation should also generate the xref files).
Each build configuration can also have variables, that make your build process dynamic. You can use variables almost anywhere in this xml and dynamically overload their values when running the build.
Several build configurations can be defined for a single project.

Each build configuration can define "children" build configurations.
Each child inherits its parent properties following these rules:
- If the same leaf is defined for both, the child value is prioritized (leaf = an xml element with no descendant elements).
- If the xml element is a list, the elements if the child (if any) will be added to the elements of the parent (if any). For instance, the tasks list has this behavior.]]></xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
    <xs:attribute name="Name" type="xs:string">
      <xs:annotation>
        <xs:documentation><![CDATA[The name of this configuration. Purely informative.]]></xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="ArrayOfOeVariable">
    <xs:sequence>
      <xs:element minOccurs="0" maxOccurs="unbounded" name="Variable" nillable="true" type="OeVariable">
        <xs:annotation>
          <xs:documentation><![CDATA[A variable to use in a build configuration.

Remarks:
Variables make your build process dynamic by allowing you to change build options without having to modify this xml.
You can use a variable with the syntax {{variable_name}}.
Variables will be replaced by their value at run time.
If the variable exists as an environment variable, its value will be taken in priority (this allows to overload values using environment variables).
Non existing variables will be replaced by an empty string.
Variables can be used in any "string type" properties (this exclude numbers/booleans).
You can use variables in the variables definition but they must be defined in the right order.

Special variables are already defined and available:
- {{SOURCE_DIRECTORY}} the application source directory (defined in properties)
- {{PROJECT_DIRECTORY}} the project directory ({{SOURCE_DIRECTORY}}/.oe)
- {{PROJECT_LOCAL_DIRECTORY}} the project local directory ({{SOURCE_DIRECTORY}}/.oe/local)
- {{DLC}} the dlc path used for the current build
- {{OUTPUT_DIRECTORY}} the build output directory (default to {{SOURCE_DIRECTORY}}/.oe/bin)
- {{CONFIGURATION_NAME}} the build configuration name for the current build
- {{CURRENT_DIRECTORY}} the current directory]]></xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="OeVariable">
    <xs:attribute name="Name" type="xs:string">
      <xs:annotation>
        <xs:documentation><![CDATA[The variable name. Can then be used as follows: {{variable_name}}.]]></xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="Value" type="xs:string">
      <xs:annotation>
        <xs:documentation><![CDATA[The variable value.]]></xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="OeProperties">
    <xs:sequence>
      <xs:element minOccurs="0" maxOccurs="1" name="DlcDirectory" type="xs:string">
        <xs:annotation>
          <xs:documentation><![CDATA[The path to the directory containing the installation of openedge.
Commonly known as the DLC directory.
Defaults to "$DLC (openedge installation directory)".

Remarks:
It should contain, among many other things, a "bin" directory where the openedge executables are located.]]></xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" maxOccurs="1" name="OpenedgeCodePage" type="xs:string">
        <xs:annotation>
          <xs:documentation><![CDATA[The code page to use for input/output with openedge processes.
This will default to the value read for -cpstream or -cpinternal in the file $DLC/startup.pf.

Remarks:
This property should be configured if you encounter wrong characters (wrong encoding) in the console.]]></xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" maxOccurs="1" name="ProjectDatabases" type="ArrayOfOeProjectDatabase">
        <xs:annotation>
          <xs:documentation><![CDATA[A list of all the openedge databases used by your project (couple of logical name + data definition file path).
This list should contain all the databases necessary to compile your application.

Remarks:
The databases specified in this property will be automatically generated during a build (temporary databases).
The idea is to version .df files (data definition files) and to have a fully buildable application from a checkout.]]></xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" maxOccurs="1" name="ExtraDatabaseConnectionString" type="xs:string">
        <xs:annotation>
          <xs:documentation><![CDATA[A database connection string that will be used to connect to extra databases before a build.

Remarks:
This obviously requires existing databases.
Most of the time, it is simpler to use the ProjectDatabase option instead of this one and let the tool generate the necessary databases.
This property is used in the following openedge statement: CONNECT VALUE(this_property).

Examples:
-db base1 -ld mylogicalName1 -H 127.0.0.1 -S 1024
-db C:\wrk\sport2000.db -1 -ld mydb
-pf C:\mypath\db.pf]]></xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" maxOccurs="1" name="DatabaseAliases" type="ArrayOfOeDatabaseAlias">
        <xs:annotation>
          <xs:documentation><![CDATA[A list of database aliases needed in your project (couple of logical name + alias name).

Remarks:
This is useful when your code references several aliases of a single database.]]></xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" maxOccurs="1" name="IniFilePath" type="xs:string">
        <xs:annotation>
          <xs:documentation><![CDATA[The path to the .ini file used by your project.

Remarks:
.ini files are specific to the windows platform.
.ini files are typically used to define COLORS and FONTS for GUI applications.
The font definition are required to correctly compiled .w files.
The section [STARTUP] and key [PROPATH] is read and appended to the compilation propath.
It is advised to version a neutral .ini file with a blank propath in order to allow the compilation of a GUI application.
Relative path are resolved with the current directory but you can use {{SOURCE_DIRECTORY}} to target the source directory.]]></xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" maxOccurs="1" name="PropathEntries" type="ArrayOfString">
        <xs:annotation>
          <xs:documentation><![CDATA[A list of paths to add to the propath during the build.

Remarks:
This list should include all the directories containing the include files necessary to compile your application.
This typically include pro library (.pl) file path or directories.
Relative path are resolved with the current directory but you can use {{SOURCE_DIRECTORY}} to target the source directory.]]></xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" maxOccurs="1" name="AddAllSourceDirectoriesToPropath" nillable="true" type="xs:boolean">
        <xs:annotation>
          <xs:documentation><![CDATA[Indicates if all the directories in the source directory should be added to the compilation propath.
Defaults to "True".

Remarks:
The idea is to use this option instead of manually specifying the compilation propath (for lazy people only).]]></xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" maxOccurs="1" name="PropathSourceDirectoriesFilter" type="OeFilterOptions">
        <xs:annotation>
          <xs:documentation><![CDATA[The filtering options for the automatic listing of directories in the source directory (to use as propath).]]></xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" maxOccurs="1" name="UseCharacterModeExecutable" nillable="true" type="xs:boolean">
        <xs:annotation>
          <xs:documentation><![CDATA[Force the use of the openedge character mode on windows platform.
Defaults to "False".

Remarks:
Typically, this option will make the build process use the "_progres.exe" executable instead of "prowin.exe".]]></xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" maxOccurs="1" name="AddDefaultOpenedgePropath" nillable="true" type="xs:boolean">
        <xs:annotation>
          <xs:documentation><![CDATA[Adds the gui (or tty if character mode) directory to the propath.
Also adds the pro library files in this directory to the propath.
Also adds the dlc and dlc/bin directories.
Defaults to "True".

Remarks:
This is the equivalent of the default propath set by openedge.]]></xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" maxOccurs="1" name="ExtraOpenedgeCommandLineParameters" type="xs:string">
        <xs:annotation>
          <xs:documentation><![CDATA[Command line parameters to add when using the openedge executable (_progres or prowin).
The available parameters for your version of openedge are available in the reference help, topic "Startup Parameter Descriptions".

Examples:
-inp 9999
-s 500
-assemblies "/root/assemblies/"
-NL -cwl -k]]></xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" maxOccurs="1" name="ProcedureToExecuteBeforeAnyProgressExecutionFilePath" type="xs:string">
        <xs:annotation>
          <xs:documentation><![CDATA[File path to an openedge procedure that will be executed for each new openedge session used (when using _progres or prowin).

Remarks:
This procedure is called with a simple RUN statement and must not have any parameters.

Examples:
This feature can be used to connected databases, create aliases or add paths to the propath before a compilation and using a custom logic.]]></xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" maxOccurs="1" name="ProcedurePathToExecuteAfterAnyProgressExecution" type="xs:string">
        <xs:annotation>
          <xs:documentation><![CDATA[File path to an openedge procedure that will be executed at the end of each new openedge session used (when using _progres or prowin).

Remarks:
This procedure is called with a simple RUN statement and must not have any parameters.
It should be used to "clean up" any custom logic put in place with the procedure execution at the beginning of the session.]]></xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" maxOccurs="1" name="OpenedgeTemporaryDirectory" type="xs:string">
        <xs:annotation>
          <xs:documentation><![CDATA[The temporary directory to use for an openedge session.
Defaults to "$TEMP/.oe_tmp-xxx (temporary folder)".

Remarks:
This is the directory used in the -T startup parameter for the openedge session.
This directory is also used to store temporary files needed for the compilation and for the interface between openedge and this tool.]]></xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" maxOccurs="1" name="CompilationOptions" type="OeCompilationOptions">
        <xs:annotation>
          <xs:documentation><![CDATA[The options to use to compile your application.]]></xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" maxOccurs="1" name="BuildOptions" type="OeBuildOptions">
        <xs:annotation>
          <xs:documentation><![CDATA[The options used when building your application.]]></xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="ArrayOfOeProjectDatabase">
    <xs:sequence>
      <xs:element minOccurs="0" maxOccurs="unbounded" name="ProjectDatabase" nillable="true" type="OeProjectDatabase">
        <xs:annotation>
          <xs:documentation><![CDATA[An openedge database representation, consisting of a data definition file and the database logical name.]]></xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="OeProjectDatabase">
    <xs:attribute name="LogicalName" type="xs:string">
      <xs:annotation>
        <xs:documentation><![CDATA[The logical name of the database.

Remarks:
This is the database name used in the code.]]></xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="DataDefinitionFilePath" type="xs:string">
      <xs:annotation>
        <xs:documentation><![CDATA[The path to the data definition (.df) file representing the schema of your database.

Remarks:
From this file, the tool is able to generate a temporary database used to compile your application.]]></xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="ArrayOfOeDatabaseAlias">
    <xs:sequence>
      <xs:element minOccurs="0" maxOccurs="unbounded" name="Alias" nillable="true" type="OeDatabaseAlias">
        <xs:annotation>
          <xs:documentation><![CDATA[A database logical name / alias couple.]]></xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="OeDatabaseAlias">
    <xs:attribute name="DatabaseLogicalName" type="xs:string">
      <xs:annotation>
        <xs:documentation><![CDATA[The database logical name for which to create the alias.]]></xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="AliasLogicalName" type="xs:string">
      <xs:annotation>
        <xs:documentation><![CDATA[The alias name to give to the database.]]></xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="ArrayOfString">
    <xs:sequence>
      <xs:element minOccurs="0" maxOccurs="unbounded" name="Path" nillable="true" type="xs:string" />
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="OeFilterOptions">
    <xs:complexContent mixed="false">
      <xs:extension base="AOeTaskFilter">
        <xs:sequence>
          <xs:element minOccurs="0" maxOccurs="1" name="ExcludeHiddenDirectories" nillable="true" type="xs:boolean">
            <xs:annotation>
              <xs:documentation><![CDATA[Whether or not to ignore hidden directories during the listing.
Defaults to "False".]]></xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" maxOccurs="1" name="RecursiveListing" nillable="true" type="xs:boolean">
            <xs:annotation>
              <xs:documentation><![CDATA[Whether or not to include the content of subdirectories when listing.
Defaults to "True".]]></xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" maxOccurs="1" name="ExtraVcsPatternExclusion" type="xs:string">
            <xs:annotation>
              <xs:documentation><![CDATA[Extra patterns of path to exclude during a listing, corresponds to typical svn/git directories that we don't want to include in builds.
Defaults to ".git**;.svn**".]]></xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="AOeTaskFilter" abstract="true">
    <xs:complexContent mixed="false">
      <xs:extension base="AOeTask">
        <xs:attribute name="Include" type="xs:string">
          <xs:annotation>
            <xs:documentation><![CDATA[A path pattern that describes paths that should be processed by this task.

Remarks:
Several pattern can be used, separate them with a semi-colon (i.e. ;).
Internally, each pattern is turned into a valid regular expression.
If a file is matched by several patterns, only the first one will be used.

The following symbols can be used in patterns:

- ** will match any char any number of time (corresponds to a regex greedy match)
- * will match only non path separators any time (can be used to match any file name)
- ? matches non path separators exactly 1 time
- (( will start capturing characters (equivalent to regex capturing parenthesis)
- )) will stop capturing characters
- || will corresponds to a "or" in a captured context (equivalent to | in regex)

Examples:
** will match any path.
((C:\**))((*.txt)) will match any txt file in C:\ and also captures the full path (group 1) as well as the file name (group 2).]]></xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="IncludeRegex" type="xs:string">
          <xs:annotation>
            <xs:documentation><![CDATA[A regular expression path pattern that describes paths that should be processed by this task.]]></xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="Exclude" type="xs:string">
          <xs:annotation>
            <xs:documentation><![CDATA[A path pattern that describes paths that should be excluded from being processed by this task.

Remarks:
Several pattern can be used, separate them with a semi-colon (i.e. ;).
Internally, each pattern is turned into a valid regular expression.
If a file is matched by several patterns, only the first one will be used.

The following symbols can be used in patterns:

- ** will match any char any number of time (corresponds to a regex greedy match)
- * will match only non path separators any time (can be used to match any file name)
- ? matches non path separators exactly 1 time
- (( will start capturing characters (equivalent to regex capturing parenthesis)
- )) will stop capturing characters
- || will corresponds to a "or" in a captured context (equivalent to | in regex)

Examples:
** will match any path.
((C:\**))((*.txt)) will match any txt file in C:\ and also captures the full path (group 1) as well as the file name (group 2).]]></xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="ExcludeRegex" type="xs:string">
          <xs:annotation>
            <xs:documentation><![CDATA[A regular expression path pattern that describes paths that should be excluded from being processed by this task.]]></xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="AOeTask" abstract="true">
    <xs:attribute name="Name" type="xs:string">
      <xs:annotation>
        <xs:documentation><![CDATA[The name of this task. Purely informative.]]></xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="OeTaskExec">
    <xs:complexContent mixed="false">
      <xs:extension base="AOeTask">
        <xs:sequence>
          <xs:element minOccurs="0" maxOccurs="1" name="ExecutableFilePath" type="xs:string">
            <xs:annotation>
              <xs:documentation><![CDATA[The path to the executable file.]]></xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" maxOccurs="1" name="Parameters" type="xs:string">
            <xs:annotation>
              <xs:documentation><![CDATA[The command line parameters for the execution.]]></xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" maxOccurs="1" name="HiddenExecution" nillable="true" type="xs:boolean">
            <xs:annotation>
              <xs:documentation><![CDATA[Hide the execution (do not show a window).]]></xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" maxOccurs="1" name="MaxTimeOut" nillable="true" type="xs:int">
            <xs:annotation>
              <xs:documentation><![CDATA[The maximum time in milliseconds before aborting the execution.]]></xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" maxOccurs="1" name="DoNotRedirectOutput" nillable="true" type="xs:boolean">
            <xs:annotation>
              <xs:documentation><![CDATA[Do not redirect the executable standard and error output to the log.]]></xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" maxOccurs="1" name="IgnoreExitCode" nillable="true" type="xs:boolean">
            <xs:annotation>
              <xs:documentation><![CDATA[Do not consider exit code different than 0 as a failed execution.]]></xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" maxOccurs="1" name="FailOnErrorOutput" nillable="true" type="xs:boolean">
            <xs:annotation>
              <xs:documentation><![CDATA[Finish this task in error if the executable wrote in the error output stream.]]></xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" maxOccurs="1" name="WorkingDirectory" type="xs:string">
            <xs:annotation>
              <xs:documentation><![CDATA[The directory to use as the working directory for the execution.]]></xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="AOeTaskFile" abstract="true">
    <xs:complexContent mixed="false">
      <xs:extension base="AOeTaskFilter" />
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="AOeTaskFileArchiverArchive" abstract="true">
    <xs:complexContent mixed="false">
      <xs:extension base="AOeTaskFile" />
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="OeTaskFileArchiverArchiveProlib">
    <xs:complexContent mixed="false">
      <xs:extension base="AOeTaskFileArchiverArchive">
        <xs:attribute name="TargetProlibFilePath" type="xs:string">
          <xs:annotation>
            <xs:documentation><![CDATA[The path to the targeted prolib file.

Remarks:
Several target paths can be used, separate them with a semi-colon (i.e. ;).
Each target path can use special placeholders:
- {{FILE_SOURCE_DIRECTORY}} will be replaced by the source directory of the file processed
- {{group_name}} will be replaced by the value captured in group "group_name"

Examples:
Having "((C:\folder\**))((*.txt))" as an include pattern
and "D:\pre_{{2}}.raw" as the target,
for the file "C:\folder\myfile.txt", we will have the target "D:\pre_myfile.raw".
(note: In this example, the captured group 1 was not used)]]></xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="RelativeTargetFilePath" type="xs:string">
          <xs:annotation>
            <xs:documentation><![CDATA[The relative target file path inside the archive.

Remarks:
Several target paths can be used, separate them with a semi-colon (i.e. ;).
Each target path can use special placeholders:
- {{FILE_SOURCE_DIRECTORY}} will be replaced by the source directory of the file processed
- {{group_name}} will be replaced by the value captured in group "group_name"

Examples:
Having "((C:\folder\**))((*.txt))" as an include pattern
and "D:\pre_{{2}}.raw" as the target,
for the file "C:\folder\myfile.txt", we will have the target "D:\pre_myfile.raw".
(note: In this example, the captured group 1 was not used)]]></xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="RelativeTargetDirectory" type="xs:string">
          <xs:annotation>
            <xs:documentation><![CDATA[The relative target directory inside the archive.

Remarks:
Several target paths can be used, separate them with a semi-colon (i.e. ;).
Each target path can use special placeholders:
- {{FILE_SOURCE_DIRECTORY}} will be replaced by the source directory of the file processed
- {{group_name}} will be replaced by the value captured in group "group_name"

Examples:
Having "((C:\folder\**))((*.txt))" as an include pattern
and "D:\pre_{{2}}.raw" as the target,
for the file "C:\folder\myfile.txt", we will have the target "D:\pre_myfile.raw".
(note: In this example, the captured group 1 was not used)]]></xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="ProlibVersion" type="xs:string">
          <xs:annotation>
            <xs:documentation><![CDATA[The version to use for the pro library file.
Options are "Default, V7Standard, V8MemoryMapped, V11Standard, V12MemoryMapped".]]></xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="FilePathCodePage" type="xs:string">
          <xs:annotation>
            <xs:documentation><![CDATA[The openedge codepage to use for file path encoding inside the pro library.]]></xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="OeTaskFileArchiverArchiveProlibCompile">
    <xs:complexContent mixed="false">
      <xs:extension base="OeTaskFileArchiverArchiveProlib" />
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="OeTaskFileCopy">
    <xs:complexContent mixed="false">
      <xs:extension base="AOeTaskFileArchiverArchive">
        <xs:attribute name="TargetFilePath" type="xs:string">
          <xs:annotation>
            <xs:documentation><![CDATA[The relative target file path inside the archive.

Remarks:
Several target paths can be used, separate them with a semi-colon (i.e. ;).
Each target path can use special placeholders:
- {{FILE_SOURCE_DIRECTORY}} will be replaced by the source directory of the file processed
- {{group_name}} will be replaced by the value captured in group "group_name"

Examples:
Having "((C:\folder\**))((*.txt))" as an include pattern
and "D:\pre_{{2}}.raw" as the target,
for the file "C:\folder\myfile.txt", we will have the target "D:\pre_myfile.raw".
(note: In this example, the captured group 1 was not used)]]></xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="TargetDirectory" type="xs:string">
          <xs:annotation>
            <xs:documentation><![CDATA[The relative target directory inside the archive.

Remarks:
Several target paths can be used, separate them with a semi-colon (i.e. ;).
Each target path can use special placeholders:
- {{FILE_SOURCE_DIRECTORY}} will be replaced by the source directory of the file processed
- {{group_name}} will be replaced by the value captured in group "group_name"

Examples:
Having "((C:\folder\**))((*.txt))" as an include pattern
and "D:\pre_{{2}}.raw" as the target,
for the file "C:\folder\myfile.txt", we will have the target "D:\pre_myfile.raw".
(note: In this example, the captured group 1 was not used)]]></xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="OeTaskFileCompile">
    <xs:complexContent mixed="false">
      <xs:extension base="OeTaskFileCopy" />
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="OeTaskFileArchiverArchiveCab">
    <xs:complexContent mixed="false">
      <xs:extension base="AOeTaskFileArchiverArchive">
        <xs:attribute name="TargetCabFilePath" type="xs:string">
          <xs:annotation>
            <xs:documentation><![CDATA[The path to the targeted archive.

Remarks:
Several target paths can be used, separate them with a semi-colon (i.e. ;).
Each target path can use special placeholders:
- {{FILE_SOURCE_DIRECTORY}} will be replaced by the source directory of the file processed
- {{group_name}} will be replaced by the value captured in group "group_name"

Examples:
Having "((C:\folder\**))((*.txt))" as an include pattern
and "D:\pre_{{2}}.raw" as the target,
for the file "C:\folder\myfile.txt", we will have the target "D:\pre_myfile.raw".
(note: In this example, the captured group 1 was not used)]]></xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="RelativeTargetFilePath" type="xs:string">
          <xs:annotation>
            <xs:documentation><![CDATA[The relative target file path inside the archive.

Remarks:
Several target paths can be used, separate them with a semi-colon (i.e. ;).
Each target path can use special placeholders:
- {{FILE_SOURCE_DIRECTORY}} will be replaced by the source directory of the file processed
- {{group_name}} will be replaced by the value captured in group "group_name"

Examples:
Having "((C:\folder\**))((*.txt))" as an include pattern
and "D:\pre_{{2}}.raw" as the target,
for the file "C:\folder\myfile.txt", we will have the target "D:\pre_myfile.raw".
(note: In this example, the captured group 1 was not used)]]></xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="RelativeTargetDirectory" type="xs:string">
          <xs:annotation>
            <xs:documentation><![CDATA[The relative target directory inside the archive.

Remarks:
Several target paths can be used, separate them with a semi-colon (i.e. ;).
Each target path can use special placeholders:
- {{FILE_SOURCE_DIRECTORY}} will be replaced by the source directory of the file processed
- {{group_name}} will be replaced by the value captured in group "group_name"

Examples:
Having "((C:\folder\**))((*.txt))" as an include pattern
and "D:\pre_{{2}}.raw" as the target,
for the file "C:\folder\myfile.txt", we will have the target "D:\pre_myfile.raw".
(note: In this example, the captured group 1 was not used)]]></xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="CompressionLevel" type="xs:string">
          <xs:annotation>
            <xs:documentation><![CDATA[The compression level to use for the cabinet file.
Options are "None, Fastest, Optimal".]]></xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="OeTaskFileArchiverArchiveCabCompile">
    <xs:complexContent mixed="false">
      <xs:extension base="OeTaskFileArchiverArchiveCab" />
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="OeTaskFileDelete">
    <xs:complexContent mixed="false">
      <xs:extension base="AOeTaskFile" />
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="AOeTaskDirectory" abstract="true">
    <xs:complexContent mixed="false">
      <xs:extension base="AOeTaskFilter" />
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="OeTaskDirectoryDelete">
    <xs:complexContent mixed="false">
      <xs:extension base="AOeTaskDirectory" />
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="OeCompilationOptions">
    <xs:sequence>
      <xs:element minOccurs="0" maxOccurs="1" name="CompileWithDebugList" nillable="true" type="xs:boolean">
        <xs:annotation>
          <xs:documentation><![CDATA[Use the DEBUG-LIST option in the COMPILE statement.
Defaults to "False".

Remarks:
If true, the compilation process will generate a debugfile (.dbg) that consists of a line-numbered listing of the procedure with the text of all preprocessor include files, names, and parameters inserted.]]></xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" maxOccurs="1" name="CompileWithXref" nillable="true" type="xs:boolean">
        <xs:annotation>
          <xs:documentation><![CDATA[Use the XREF option in the COMPILE statement.
Defaults to "False".

Remarks:
If true, the compilation process will generate an xref file (.xrf) that contains reference information on ABL elements, cross-references between procedures and ABL objects, and cross-references between class or interface definition files and ABL objects.]]></xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" maxOccurs="1" name="CompileWithXmlXref" nillable="true" type="xs:boolean">
        <xs:annotation>
          <xs:documentation><![CDATA[Use the XREF-XML option in the COMPILE statement.
This option is only available since openedge 10.2.
Defaults to "False".

Remarks:
If true, the compilation process will generate an xref file (.xrf.xml) in XML format that contains reference information on ABL elements, cross-references between procedures and ABL objects, and cross-references between class or interface definition files and ABL objects.
This option cannot be used simultaneously with the XREF option.]]></xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" maxOccurs="1" name="CompileWithListing" nillable="true" type="xs:boolean">
        <xs:annotation>
          <xs:documentation><![CDATA[Use the LISTING option in the COMPILE statement.
Defaults to "False".

Remarks:
If true, the compilation process will produce a file (.lis) including:
- The name of the file containing the procedure or class you compile 
- The date and time at the start of the compilation 
- The number of each line in the procedure or class file 
- The block number where each statement belongs 
- The complete text of all include files (except encrypted include files) and the names of any sub-procedures and user-defined functions]]></xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" maxOccurs="1" name="CompileWithPreprocess" nillable="true" type="xs:boolean">
        <xs:annotation>
          <xs:documentation><![CDATA[Use the PREPROCESS option in the COMPILE statement.
Defaults to "False".

Remarks:
If true, the compilation process will generate a file (.preprocessed) that contains a final version of your source code after all include files have been inserted and all text substitutions have been performed.]]></xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" maxOccurs="1" name="UseCompilerMultiCompile" nillable="true" type="xs:boolean">
        <xs:annotation>
          <xs:documentation><![CDATA[Use the MULTI-COMPILE option in the COMPILE statement.
This option is only available since openedge 10.2.
Defaults to "False".

Remarks:
When set to TRUE, ABL compiles only those class definition files in the inherited class hierarchy that are not found in the cache. ABL also caches any classes or interfaces it compiles to avoid recompiling them during the session.
When set to FALSE, ABL compiles all class definition files in the inherited class hierarchy. ABL also clears the cache of any classes or interfaces compiled during the session. The default value is FALSE.]]></xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" maxOccurs="1" name="CompileOptions" type="xs:string">
        <xs:annotation>
          <xs:documentation><![CDATA[Control the behavior of the openedge compiler, allowing to compile with different options.
This option is only available since openedge 11.7.

Remarks:
The options are set and stored as a comma-separated list.
The acceptable values in openedge 11.7 are:
- require-full-names
- require-field-qualifiers
- require-full-keywords.]]></xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" maxOccurs="1" name="CompileStatementExtraOptions" type="xs:string">
        <xs:annotation>
          <xs:documentation><![CDATA[Sets extra COMPILE options to use in the COMPILE statement.

Remarks:
Use this property to specify a COMPILE option that is not managed by this tool.

Examples:
MIN-SIZE = TRUE
XCODE = "progress"
GENERATE-MD5 = TRUE
LANGUAGES (French-Canadian:French:English,Portuguese:Spanish,New-York:American:English)]]></xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" maxOccurs="1" name="TryToOptimizeCompilationDirectory" nillable="true" type="xs:boolean">
        <xs:annotation>
          <xs:documentation><![CDATA[Try to find the best location to compile an rcode instead of using the default temporary directory.
Defaults to "True".

Remarks:
By default, all rcode generated are saved in the temporary directory and then moved to the different target locations. This might result in unnecessary delays and can be avoided by saving the rcode directly to the target location. This option allows the tool to make this small simplification when it makes sense.]]></xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" maxOccurs="1" name="CompilableFileExtensionPattern" type="xs:string">
        <xs:annotation>
          <xs:documentation><![CDATA[A comma-separated list of file extension patterns that represent ABL compilable files.
Defaults to "*.p;*.w;*.t;*.cls".

Remarks:
This is a default filter that is used for each "compile" task and which allows to process only certain types of files.]]></xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" maxOccurs="1" name="NumberProcessPerCore" nillable="true" type="xs:unsignedByte">
        <xs:annotation>
          <xs:documentation><![CDATA[The number of openedge process to start simultaneously per core (on your computer) in order to compile your application.
Defaults to "1".

Remarks:
To speed up the compilation process, this tool can start parallel openedge processes to compile your application.
This option allows to fine tune the number of processes to start.]]></xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" maxOccurs="1" name="ForceSingleProcess" nillable="true" type="xs:boolean">
        <xs:annotation>
          <xs:documentation><![CDATA[Use a single process to compile your application.
Defaults to "False".

Remarks:
This option overload the default behavior of this tool, that aims to use parallel processes to speed up the compilation process.
This can be useful for low end machines or when connecting to a database in mono-user (-1 parameter).]]></xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" maxOccurs="1" name="MinimumNumberOfFilesPerProcess" nillable="true" type="xs:int">
        <xs:annotation>
          <xs:documentation><![CDATA[The minimum number of files that needs to be allocated to one of the processes before justifying the use of a new process.
Defaults to "10".

Remarks:
This option exists because there would be an important overhead to start 2 openedge processes to compile only 2 files.]]></xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="OeBuildOptions">
    <xs:sequence>
      <xs:element minOccurs="0" maxOccurs="1" name="SourceDirectoryPath" type="xs:string">
        <xs:annotation>
          <xs:documentation><![CDATA[The source directory of your application. Should be left empty in most cases.
Defaults to "$PWD (current directory)".

Remarks:
You cannot use variables in this property.]]></xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" maxOccurs="1" name="SourceToBuildFilter" type="OeFilterOptions">
        <xs:annotation>
          <xs:documentation><![CDATA[The filtering options for the source files of your application that need to be built.

Remarks:
For instance, this allows to exclude path from being considered as source files (e.g. a docs/ directory). Non source files will not be built during the source build tasks.]]></xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" maxOccurs="1" name="IncrementalBuildOptions" type="OeIncrementalBuildOptions">
        <xs:annotation>
          <xs:documentation><![CDATA[The options for an incremental build.
An incremental build improves the build process by only compiling and building files that were modified or added since the last build. It is the opposite of a full rebuild.

Remarks:
These options (and the incremental process in general) are only applicable to the tasks that are building your application sources.]]></xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" maxOccurs="1" name="SourceToBuildGitFilter" type="OeGitFilterOptions">
        <xs:annotation>
          <xs:documentation><![CDATA[Instead of a full rebuild or an incremental rebuild, use GIT to identify which files will be built.

Remarks:
This option required GIT to be installed and available in your system PATH.
The idea behind this option is to build files depending on the changes made in GIT. For instance, rebuilding files modified/added since the last commit. It allows to check if recent changes in a GIT repository introduces bugs.]]></xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" maxOccurs="1" name="FullRebuild" nillable="true" type="xs:boolean">
        <xs:annotation>
          <xs:documentation><![CDATA[Build all the source files, ignoring the incremental build options and the GIT filter options.
Defaults to "False".]]></xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" maxOccurs="1" name="OutputDirectoryPath" type="xs:string">
        <xs:annotation>
          <xs:documentation><![CDATA[The output directory for the build.
Defaults to "{{SOURCE_DIRECTORY}}\bin".

Remarks:
Relative paths in the targets of tasks will be resolved from this directory. This is only available when building the source or the output.]]></xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" maxOccurs="1" name="BuildHistoryInputFilePath" type="xs:string">
        <xs:annotation>
          <xs:documentation><![CDATA[The path to an xml file containing the information of a previous build. This is necessary for an incremental build.
Defaults to "{{PROJECT_LOCAL_DIRECTORY}}\build\latest.xml".]]></xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" maxOccurs="1" name="BuildHistoryOutputFilePath" type="xs:string">
        <xs:annotation>
          <xs:documentation><![CDATA[The path to an xml file that will be created by this build and will contain the information of that build. This is necessary for an incremental build.
Defaults to "{{PROJECT_LOCAL_DIRECTORY}}\build\latest.xml".]]></xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" maxOccurs="1" name="ReportHtmlFilePath" type="xs:string">
        <xs:annotation>
          <xs:documentation><![CDATA[The path to an html report file that will contain human-readable information about this build.
Defaults to "{{PROJECT_LOCAL_DIRECTORY}}\build\latest.html".]]></xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" maxOccurs="1" name="TreatWarningsAsErrors" nillable="true" type="xs:boolean">
        <xs:annotation>
          <xs:documentation><![CDATA[Sets whether or not build warnings must be considered as errors and stop the build.
Defaults to "False".]]></xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" maxOccurs="1" name="StopBuildOnCompilationError" nillable="true" type="xs:boolean">
        <xs:annotation>
          <xs:documentation><![CDATA[Sets whether or not the build must be stopped if a file fails to compile.
Defaults to "True".]]></xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" maxOccurs="1" name="StopBuildOnCompilationWarning" nillable="true" type="xs:boolean">
        <xs:annotation>
          <xs:documentation><![CDATA[Sets whether or not the build must be stopped if a file compiles with warnings.
Defaults to "False".]]></xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" maxOccurs="1" name="ShutdownCompilationDatabasesAfterBuild" nillable="true" type="xs:boolean">
        <xs:annotation>
          <xs:documentation><![CDATA[Sets whether or not the tool should shutdown the temporary databases created and started for the compilation (if any).
Defaults to "True".

Remarks:
Shutting down an openedge database is a really slow process and it should be avoided if you intent to build files several times consecutively.]]></xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" maxOccurs="1" name="TestMode" nillable="true" type="xs:boolean">
        <xs:annotation>
          <xs:documentation><![CDATA[Sets whether or not to run the build in "test mode". In test mode, the tasks are not actually executed. It should be used as a preview of the actual build process.
Defaults to "False".]]></xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="OeIncrementalBuildOptions">
    <xs:sequence>
      <xs:element minOccurs="0" maxOccurs="1" name="Enabled" nillable="true" type="xs:boolean">
        <xs:annotation>
          <xs:documentation><![CDATA[Sets whether or not the incremental build should be used.
An incremental build improves the build process by only compiling and building files that were modified or added since the last build. It is the opposite of a full rebuild.
Defaults to "True".

Remarks:
If true, an analysis is done on compiled files to find referenced tables and files. The build history is stored to be able to know which file was modified/added since the last build. And the MD5 checksum of each source file can be computed and saved to improve modification detection.
Depending on your build and your intentions, this can significantly improve the build performances or slow down systematic full rebuilds.]]></xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" maxOccurs="1" name="UseSimplerAnalysisForDatabaseReference" nillable="true" type="xs:boolean">
        <xs:annotation>
          <xs:documentation><![CDATA[Use a cheapest analysis mode (performance wise) to identify the database references of a compiled file.
Defaults to "False".

Remarks:
If true, the database references are not computed from the resulting xref file but simply using RCODE-INFO:TABLE-LIST.
This method is less accurate because it will not list referenced sequences or referenced tables in LIKE TABLE statements. Even if a file does not need to be recompiled when a table referenced in a LIKE TABLE statement changes, it is smart to still recompile it and make sure that the database modification does not break the code.
This option can be used on low-end computers but it is not advised to use this mode if it is not necessary.]]></xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" maxOccurs="1" name="UseCheckSumComparison" nillable="true" type="xs:boolean">
        <xs:annotation>
          <xs:documentation><![CDATA[Use a checksum comparison to identify the files that were modified between two builds.
Defaults to "False".

Remarks:
This identification technique is safer than a simple datetime/size comparison but it also costs more cpu time.
By default, a file is considered unmodified if its size and last modified date has not changed since the previous build. This option also compute and consider the file checksum using the MD5 checksum computation.]]></xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" maxOccurs="1" name="MirrorDeletedSourceFileToOutput" nillable="true" type="xs:boolean">
        <xs:annotation>
          <xs:documentation><![CDATA[Sets whether of not the tool should delete the previous targets of a source file that has been deleted since the last build.
Defaults to "False".

Examples:
On the first build, the file "A" was compiled and copied to location "/bin". The file "A" is deleted and a second build is started:
- If this option is true, the compiled file "A" in "/bin/A" will be deleted
- If not, nothing happens]]></xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" maxOccurs="1" name="MirrorDeletedTargetsToOutput" nillable="true" type="xs:boolean">
        <xs:annotation>
          <xs:documentation><![CDATA[Sets whether of not the tool should apply the modifications of a target that has been deleted since the last build.
Defaults to "False".

Examples:
On the first build, the file "A" was compiled and copied to location "/bin" as well as "/bin2". The target "/bin" is deleted and a second build is started:
- If this option is true, the compiled file "A" in "/bin/A" will be deleted
- If not, nothing happens and the file "A" is not recompiled]]></xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" maxOccurs="1" name="RebuildFilesWithNewTargets" nillable="true" type="xs:boolean">
        <xs:annotation>
          <xs:documentation><![CDATA[Sets whether of not the tool should rebuild a file if it has new targets defined since the last build.
Defaults to "False".

Examples:
On the first build, the file "A" was compiled and copied to location "/bin". A new target "/bin2" is added and a second build is started:
- If this option is true, the file "A" is recompiled and built into "/bin2/A"
- If not, nothing happens (the file "A" has not been changed since the last build)]]></xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="OeGitFilterOptions">
    <xs:sequence>
      <xs:element minOccurs="0" maxOccurs="1" name="IncludeSourceFilesModifiedSinceLastCommit" nillable="true" type="xs:boolean">
        <xs:annotation>
          <xs:documentation><![CDATA[Build source files that were modified/added/deleted since the last commit.
Defaults to "False".

Remarks:
This include all the files in staging area as well as untracked files in the working directory. Basically, any file listed in a `git status` command.
This is a good filter to build all the files you are about to commit (and thus check if they compile).]]></xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" maxOccurs="1" name="IncludeSourceFilesCommittedOnlyOnCurrentBranch" nillable="true" type="xs:boolean">
        <xs:annotation>
          <xs:documentation><![CDATA[Build source files that were modified/added/deleted in a commit that is exclusive to the current branch.
Defaults to "False".

Remarks:
The `git log` is used to identify which commits are referenced only by the current branch (or reference only by the any remote reference of the current branch). The files modified/added/deleted in these commits are then build.
To rephrase this, we consider the commits from HEAD to the first commit that has a reference different than current_branch or any_remote/current_branch (aforementioned commit is not included).
This option is useful to check if the changes you introduced with several commits in your branch do not break the build of your application.]]></xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" maxOccurs="1" name="CurrentBranchName" type="xs:string">
        <xs:annotation>
          <xs:documentation><![CDATA[The branch reference name for the current branch. To be used with IncludeSourceFilesCommittedOnlyOnCurrentBranch.

Remarks:
This can be useful in CI builds where the CI checks out a repo in detached mode (it checks out a commit, not a branch).
However, by default, if in detached mode, this tool tries to deduce the current branch by checking the first remote reference of the currently checked out commit. This will be sufficient in most cases, so this option can often be left empty.]]></xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" maxOccurs="1" name="CurrentBranchOriginCommit" type="xs:string">
        <xs:annotation>
          <xs:documentation><![CDATA[The reference or SHA1 of the commit from which the current branch originated. To be used with IncludeSourceFilesCommittedOnlyOnCurrentBranch.

Remarks:
Read the description of IncludeSourceFilesCommittedOnlyOnCurrentBranch to understand this option.
This commit is generally found automatically but you can set its value to force a build between HEAD and a given commit.]]></xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="ArrayOfOeBuildStepClassic">
    <xs:sequence>
      <xs:element minOccurs="0" maxOccurs="unbounded" name="Step" nillable="true" type="OeBuildStepClassic">
        <xs:annotation>
          <xs:documentation><![CDATA[A step (list of tasks) to build your application.]]></xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="OeBuildStepClassic">
    <xs:complexContent mixed="false">
      <xs:extension base="OeBuildStep">
        <xs:sequence>
          <xs:element minOccurs="0" maxOccurs="1" name="Tasks" type="ArrayOfChoice1">
            <xs:annotation>
              <xs:documentation><![CDATA[A list of tasks.]]></xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="OeBuildStep" abstract="true">
    <xs:attribute name="Name" type="xs:string">
      <xs:annotation>
        <xs:documentation><![CDATA[The name of this build step. Purely informative.]]></xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="OeBuildStepBuildSource">
    <xs:complexContent mixed="false">
      <xs:extension base="OeBuildStep">
        <xs:sequence>
          <xs:element minOccurs="0" maxOccurs="1" name="Tasks" type="ArrayOfChoice2">
            <xs:annotation>
              <xs:documentation><![CDATA[A list of tasks to build your source files.]]></xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="ArrayOfChoice2">
    <xs:choice minOccurs="0" maxOccurs="unbounded">
      <xs:element minOccurs="0" maxOccurs="1" name="Copy" nillable="true" type="OeTaskFileCopy">
        <xs:annotation>
          <xs:documentation><![CDATA[This task copies files.]]></xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" maxOccurs="1" name="Prolib" nillable="true" type="OeTaskFileArchiverArchiveProlib">
        <xs:annotation>
          <xs:documentation><![CDATA[This task adds files into pro libraries (.pl).]]></xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" maxOccurs="1" name="CompileInCab" nillable="true" type="OeTaskFileArchiverArchiveCabCompile">
        <xs:annotation>
          <xs:documentation><![CDATA[This task compiles openedge source files into rcode and adds them into cabinet files.]]></xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" maxOccurs="1" name="Cab" nillable="true" type="OeTaskFileArchiverArchiveCab">
        <xs:annotation>
          <xs:documentation><![CDATA[This task adds files into cabinet files.]]></xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" maxOccurs="1" name="Compile" nillable="true" type="OeTaskFileCompile">
        <xs:annotation>
          <xs:documentation><![CDATA[This task compiles openedge source files to rcode.]]></xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" maxOccurs="1" name="CompileInProlib" nillable="true" type="OeTaskFileArchiverArchiveProlibCompile">
        <xs:annotation>
          <xs:documentation><![CDATA[This task compiles openedge source files into rcode and adds them into pro libraries (.pl).]]></xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:choice>
  </xs:complexType>
  <xs:complexType name="ArrayOfChoice1">
    <xs:choice minOccurs="0" maxOccurs="unbounded">
      <xs:element minOccurs="0" maxOccurs="1" name="Execute" nillable="true" type="OeTaskExec">
        <xs:annotation>
          <xs:documentation><![CDATA[This task starts a new external process.]]></xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" maxOccurs="1" name="Delete" nillable="true" type="OeTaskFileDelete">
        <xs:annotation>
          <xs:documentation><![CDATA[This task deletes files.]]></xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" maxOccurs="1" name="Cab" nillable="true" type="OeTaskFileArchiverArchiveCab">
        <xs:annotation>
          <xs:documentation><![CDATA[This task adds files into cabinet files.]]></xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" maxOccurs="1" name="RemoveDirectory" nillable="true" type="OeTaskDirectoryDelete">
        <xs:annotation>
          <xs:documentation><![CDATA[This task deletes directories.]]></xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:choice>
  </xs:complexType>
  <xs:complexType name="ArrayOfOeBuildStepBuildSource">
    <xs:sequence>
      <xs:element minOccurs="0" maxOccurs="unbounded" name="Step" nillable="true" type="OeBuildStepBuildSource">
        <xs:annotation>
          <xs:documentation><![CDATA[A step to build your source files.
The list of files in your source directory is done at the beginning of each step.]]></xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
</xs:schema>